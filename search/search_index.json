{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Which language is right for you?","text":"<p>Programming languages are the building blocks of software development. With so many suitable programming languages available, it can be difficult to choose the right one to start learning.</p> <p>This site aims to help you make that decision by comparing popular programming languages and their application in a beginner-friendly context. We will compare the syntax, features, and use cases of each language to help you decide which one is right for you.</p>"},{"location":"syntax/functions/","title":"Functions","text":"<p>Functions are important building blocks in programming languages that allow code reuse and aid in the organization of code. They allow us to group code into logical units that can be called from other parts of our program. On this page, we will compare function declaration and invocation in some popular programming languages.</p>"},{"location":"syntax/functions/#function-declaration","title":"Function Declaration","text":"<p>In both Kotlin and Python, functions must be declared before they can be used. However, the syntax for declaring functions is slightly different in each language.</p>"},{"location":"syntax/functions/#kotlin","title":"Kotlin","text":""},{"location":"syntax/functions/#signature","title":"Signature","text":"<p>In Kotlin, functions are declared using the <code>fun</code> keyword, followed by the function name, parameter list, and return type (if any1). The following function accepts a parameter <code>name</code> of type <code>String</code>. It does not return a value.</p> <pre><code>fun broadcast(name: String) {\nprintln(\"Hello from $name!\")\n}\n</code></pre> <p>A function with a return type is declared as follows:</p> <pre><code>fun greet(name: String): String {\nreturn \"Hello, $name!\"\n}\n</code></pre> <ol> <li> <p>Here, \"if any\" refers to any return type other than <code>Unit</code>, the singleton used when no return value exists. <code>Unit</code> is analogous to <code>void</code> in Java. Please note all methods in Kotlin must return a value, and that the appropriate return type and statement are automatically inserted by the compiler.\u00a0\u21a9</p> </li> </ol>"},{"location":"syntax/variables/","title":"Variables","text":"<p>Variables are an essential concept in programming languages. They allow us to store and manipulate values, making it easier to work with data in our code. On this page, we will compare variable declaration and assignment in some popular programming languages.</p>"},{"location":"syntax/variables/#variable-declaration","title":"Variable Declaration","text":"<p>In both Kotlin and Python, variables must be declared before they can be used. However, the syntax for declaring variables is slightly different in each language.</p>"},{"location":"syntax/variables/#kotlin","title":"Kotlin","text":"<p>In Kotlin, variables can be declared using the <code>val</code> and <code>var</code> keywords, where <code>val</code> declared a read-only variable (analog to <code>final</code> in Java) and <code>var</code> declares a mutable variable. The syntax for declaring a variable is as follows:</p> <pre><code>val readOnlyVariable = 5\nvar readWriteVariable = \"Hello World\"\n</code></pre> <p>In the above example, the types of the variables are inferred by the compiler. However, you can also explicitly specify the type of a variable (semantically equivalent to the previous example):</p> <pre><code>val readOnlyVariable: Int = 5\nvar readWriteVariable: String = \"Hello World\"\n</code></pre> <p>Once a variable has been declared, it cannot be reassigned to a value of a different type.</p>"},{"location":"syntax/variables/#python","title":"Python","text":"<p>In Python, variables are declared by assigning a value to them. The syntax for declaring a variable is as follows:</p> <pre><code>myVariableA = 5\nmyVariableB = \"Hello World\"\n</code></pre> <p>Python is a dynamically typed language, so the type of a variable is inferred by the interpreter. It also is possible to reassign a variable to a value of a different type:</p> <pre><code>myVariableA = 5\nmyVariableA = \"Foo\"\n</code></pre>"}]}